//
// Protocol buffers definition for dgs server
//
syntax = "proto3";
package pt.tecnico.staysafe.dgs.grpc;

option java_multiple_files = true;

import "google/protobuf/timestamp.proto";


//function sniffer_join
//
message SnifferJoinRequest {
	string name = 1;
	string address = 2;
}

message SnifferJoinResponse {
	string success = 1;
}


//function sniffer_info
//
message SnifferInfoRequest {
	string name = 1;
}

message SnifferInfoResponse {
	string nameAddress = 1;
}


//function report
//
message ReportRequest {
	string name = 1;
	string infection = 2;
	int64 id = 3;
	google.protobuf.Timestamp timeIn = 4;
	google.protobuf.Timestamp timeOut = 5;
}

message ReportResponse {
	string success = 1;
}


//function individual_infection_probability
//
message IndividualProbRequest {
	int64 id = 1;
}

message IndividualProbResponse {
	float prob = 1;
}


//function aggregate_infection_probability
//
message AggregateProbRequest {
	string command = 1;
}

message AggregateProbResponse {
	repeated float stat = 1;
}


//function ctrlPing
//
message PingRequest {
	string text = 1;
}

message PingResponse {
	string text = 1;
}


//function ctrlInit
//
message InitRequest {
	string snifferName = 1;
	string infection = 2;
	int64 id = 3;
	google.protobuf.Timestamp timeIn = 4;
	google.protobuf.Timestamp timeOut = 5;

}

message InitResponse {
	string success = 1;
}


//function ctrlClear
//
message ClearRequest {
	//No arguments needed
}

message ClearResponse {
	string success = 1;
}

//function update
//
message UpdateRequest {
	int64 sequenceNumber = 1;
}

message UpdateResponse {
	string success = 1;
}

//function SendUpdate
//
message SendUpdateRequest {
	//No arguments needed
}

message SendUpdateResponse {
	int64 sequenceNumber = 1;
}

//function IncrementSequenceNumber
//

message IncrementSequenceNumberRequest{
	//No arguments needed
}

message IncrementSequenceNumberResponse{
	int64 sequenceNumber = 1;
}


service Dgs {
	rpc sniffer_join(SnifferJoinRequest) returns (SnifferJoinResponse);
	rpc sniffer_info(SnifferInfoRequest) returns (SnifferInfoResponse);
	rpc report(ReportRequest) returns (ReportResponse);
	rpc individual_infection_probability(IndividualProbRequest) returns (IndividualProbResponse);
	rpc aggregate_infection_probability(AggregateProbRequest) returns (AggregateProbResponse);
	rpc ctrl_ping(PingRequest) returns (PingResponse);
	rpc ctrl_init(InitRequest) returns (InitResponse);
	rpc ctrl_clear(ClearRequest) returns (ClearResponse);
	rpc update(UpdateRequest) returns (UpdateResponse);
	rpc send_update(SendUpdateRequest) returns (SendUpdateResponse);
	rpc increment_sequence_number(IncrementSequenceNumberRequest) returns (IncrementSequenceNumberResponse);
}